import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from datetime import datetime, timedelta
import numpy as np
import re

def validate_data(df):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    errors = []
    warnings = []
    
    print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•...")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
    if df.empty:
        errors.append("–§–∞–π–ª –ø—É—Å—Ç–æ–π")
        return False, errors, df
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required_columns = ['Task', 'Duration']
    for col in required_columns:
        if col not in df.columns:
            errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: '{col}'")
    
    if errors:
        return False, errors, df
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–¥–∞—á
    duplicate_tasks = df[df.duplicated('Task', keep=False)]
    if not duplicate_tasks.empty:
        duplicate_names = duplicate_tasks['Task'].unique()
        errors.append(f"–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á: {', '.join(duplicate_names)}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    try:
        df['Duration'] = pd.to_numeric(df['Duration'], errors='coerce')
        invalid_durations = df['Duration'].isna() | (df['Duration'] <= 0)
        if invalid_durations.any():
            invalid_tasks = df[invalid_durations]['Task'].tolist()
            errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {', '.join(invalid_tasks)}")
    except Exception as e:
        errors.append(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ 'Duration': {e}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if 'Start' in df.columns:
        try:
            df['Start'] = pd.to_datetime(df['Start'], errors='coerce', format='%Y-%m-%d')
            invalid_dates = df['Start'].isna()
            if invalid_dates.any():
                invalid_tasks = df[invalid_dates]['Task'].tolist()
                errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞: {', '.join(invalid_tasks)}")
        except Exception as e:
            errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç: {e}")
    else:
        df['Start'] = pd.Timestamp.now().normalize()
    
    # 6. –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
    if 'Dependencies' in df.columns:
        all_tasks = set(df['Task'])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        for _, task in df.iterrows():
            deps_str = str(task['Dependencies']) if pd.notna(task['Dependencies']) else ''
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            if re.search(r'[{}[\]()]', deps_str):
                errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –∑–∞–¥–∞—á–∏ '{task['Task']}': {deps_str}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
            if ',,' in deps_str or deps_str.startswith(',') or deps_str.endswith(','):
                errors.append(f"–ü—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –∑–∞–¥–∞—á–∏ '{task['Task']}': {deps_str}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –∑–∞–¥–∞—á
        missing_deps = []
        for _, task in df.iterrows():
            deps = parse_dependencies(task['Dependencies'])
            for dep in deps:
                if dep and dep not in all_tasks:
                    missing_deps.append(f"'{task['Task']}' ‚Üí '{dep}'")
        
        if missing_deps:
            errors.append(f"–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        cycles = find_cyclic_dependencies(df)
        if cycles:
            for cycle in cycles:
                errors.append(f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {cycle}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–º–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self_deps = []
        for _, task in df.iterrows():
            deps = parse_dependencies(task['Dependencies'])
            if task['Task'] in deps:
                self_deps.append(f"'{task['Task']}'")
        
        if self_deps:
            errors.append(f"–°–∞–º–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(self_deps)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º—ã—Ö)
        if len(df) > 1:
            graph = build_dependency_graph(df)
            isolated_tasks = []
            for task_name, task_data in graph.items():
                if not task_data['dependencies'] and not task_data['successors']:
                    isolated_tasks.append(f"'{task_name}'")
            
            if isolated_tasks:
                warnings.append(f"–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–±–µ–∑ —Å–≤—è–∑–µ–π): {', '.join(isolated_tasks)}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    numeric_columns = ['Workers', 'Priority', 'Cost']  # –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    for col in numeric_columns:
        if col in df.columns:
            try:
                df[col] = pd.to_numeric(df[col], errors='coerce')
                invalid_values = df[col].isna()
                if invalid_values.any():
                    invalid_tasks = df[invalid_values]['Task'].tolist()
                    warnings.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ '{col}': {', '.join(invalid_tasks)}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if col in ['Workers', 'Duration']:
                    negative_values = df[df[col] < 0]
                    if not negative_values.empty:
                        tasks_list = negative_values['Task'].tolist()
                        errors.append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ '{col}': {', '.join(tasks_list)}")
            except Exception as e:
                warnings.append(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–æ–Ω–∫–µ '{col}': {e}")
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–¥–∞—á
    invalid_names = []
    for task_name in df['Task']:
        if not isinstance(task_name, str) or not task_name.strip():
            invalid_names.append(f"'{task_name}'")
        elif len(task_name.strip()) == 0:
            invalid_names.append("–ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    
    if invalid_names:
        errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á: {', '.join(invalid_names)}")
    
    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if 'Dependencies' in df.columns and len(df) > 10:
        max_chain_length = find_max_chain_length(df)
        if max_chain_length > len(df) * 0.7:  # –ï—Å–ª–∏ —Ü–µ–ø–æ—á–∫–∞ –±–æ–ª—å—à–µ 70% –∑–∞–¥–∞—á
            warnings.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ({max_chain_length} –∑–∞–¥–∞—á)")
    
    # 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –¥–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞)
    if 'Start' in df.columns and 'Duration' in df.columns:
        date_conflicts = find_date_conflicts(df)
        if date_conflicts:
            warnings.append(f"–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(date_conflicts)} –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π")
    
    # –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í–ê–õ–ò–î–ê–¶–ò–ò
    if warnings:
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")
    
    if errors:
        print("‚ùå –û–®–ò–ë–ö–ò:")
        for error in errors:
            print(f"   üö´ {error}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for error in errors:
            if "—Ü–∏–∫–ª–∏—á–µ—Å–∫" in error.lower():
                print("   ‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –∫—Ä—É–≥–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏")
            elif "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ" in error.lower():
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–¥–∞—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")
            elif "–¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è" in error.lower():
                print("   ‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏")
            elif "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ" in error.lower():
                print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ")
            elif "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" in error.lower():
                print("   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
            elif "–¥–∞—Ç—ã" in error.lower():
                print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î –¥–ª—è –¥–∞—Ç")
            elif "—Å–∞–º–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏" in error.lower():
                print("   ‚Ä¢ –ó–∞–¥–∞—á–∏ –Ω–µ –º–æ–≥—É—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç —Å–∞–º–∏—Ö —Å–µ–±—è")
            elif "—Å–∏–º–≤–æ–ª—ã" in error.lower():
                print("   ‚Ä¢ –£–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            elif "–ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã" in error.lower():
                print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        print(f"\nüìã –û–ë–ó–û–† –î–ê–ù–ù–´–•:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(df)}")
        print(f"   –ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns)}")
        print(f"   –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
        print(df.head(3).to_string(index=False))
        
        return False, errors, df
    
    print("‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print(f"   ‚Ä¢ –ó–∞–¥–∞—á–∏: {len(df)}")
    print(f"   ‚Ä¢ –ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns)}")
    print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {df['Start'].min().strftime('%d.%m.%Y')} - {df['End'].max().strftime('%d.%m.%Y') if 'End' in df.columns else 'N/A'}")
    
    return True, errors, df

def parse_dependencies(deps_str):
    """–ü–∞—Ä—Å–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if pd.isna(deps_str) or deps_str == '' or deps_str == 'nan':
        return []
    
    try:
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean_str = str(deps_str).replace('"', '').replace("'", "").strip()
        if not clean_str:
            return []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –æ—á–∏—â–∞–µ–º
        deps = [dep.strip() for dep in clean_str.split(',')]
        return [dep for dep in deps if dep]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    except Exception:
        return []

def find_cyclic_dependencies(df):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    graph = {}
    for _, task in df.iterrows():
        graph[task['Task']] = parse_dependencies(task['Dependencies'])
    
    def dfs(task, visited, path):
        if task in visited:
            if task in path:
                cycle_start = path.index(task)
                return path[cycle_start:]
            return None
        
        visited.add(task)
        path.append(task)
        
        for neighbor in graph.get(task, []):
            if neighbor in graph:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                cycle = dfs(neighbor, visited.copy(), path.copy())
                if cycle:
                    return cycle
        
        return None
    
    all_cycles = []
    visited_global = set()
    
    for task in graph.keys():
        if task not in visited_global:
            cycle = dfs(task, set(), [])
            if cycle:
                cycle_str = ' ‚Üí '.join(cycle + [cycle[0]])  # –ó–∞–º—ã–∫–∞–µ–º —Ü–∏–∫–ª
                if cycle_str not in all_cycles:
                    all_cycles.append(cycle_str)
                visited_global.update(cycle)
    
    return all_cycles

def build_dependency_graph(df):
    """–°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    graph = {}
    for _, task in df.iterrows():
        graph[task['Task']] = {
            'dependencies': parse_dependencies(task['Dependencies']),
            'successors': []
        }
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
    for task_name, task_data in graph.items():
        for dep in task_data['dependencies']:
            if dep in graph:
                graph[dep]['successors'].append(task_name)
    
    return graph

def find_max_chain_length(df):
    """–ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    graph = build_dependency_graph(df)
    max_length = 0
    
    def dfs_length(task, visited, length):
        nonlocal max_length
        max_length = max(max_length, length)
        
        for successor in graph[task]['successors']:
            if successor not in visited:
                dfs_length(successor, visited | {successor}, length + 1)
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–¥–∞—á –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    start_tasks = [task for task, data in graph.items() if not data['dependencies']]
    for start_task in start_tasks:
        dfs_length(start_task, {start_task}, 1)
    
    return max_length

def find_date_conflicts(df):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤ –¥–∞—Ç–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    conflicts = []
    
    for i, task1 in df.iterrows():
        if pd.isna(task1['Start']) or pd.isna(task1['Duration']):
            continue
            
        end1 = task1['Start'] + pd.to_timedelta(task1['Duration'], unit='d')
        
        for j, task2 in df.iterrows():
            if i >= j or pd.isna(task2['Start']) or pd.isna(task2['Duration']):
                continue
                
            end2 = task2['Start'] + pd.to_timedelta(task2['Duration'], unit='d')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            if (task1['Start'] <= end2 and task2['Start'] <= end1):
                conflicts.append(f"'{task1['Task']}' –∏ '{task2['Task']}'")
    
    return conflicts

# –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô (calculate_critical_path_with_dependencies, print_detailed_analysis, create_gantt_chart)

def calculate_critical_path_with_dependencies(df):
    """–ü–†–ê–í–ò–õ–¨–ù–´–ô —Ä–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    df = df.copy()
    df['Is_Critical'] = False
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á
    tasks_dict = {}
    for _, task in df.iterrows():
        tasks_dict[task['Task']] = {
            'duration': task['Duration'],
            'dependencies': parse_dependencies(task.get('Dependencies', '')),
            'early_start': None,
            'early_finish': None,
            'successors': []
        }
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π
    for task_name, task_data in tasks_dict.items():
        for dep in task_data['dependencies']:
            if dep in tasks_dict:
                tasks_dict[dep]['successors'].append(task_name)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–Ω–Ω–∏—Ö —Å—Ä–æ–∫–æ–≤
    def calculate_early_times(task_name):
        if tasks_dict[task_name]['early_start'] is not None:
            return tasks_dict[task_name]['early_start'], tasks_dict[task_name]['early_finish']
        
        deps = tasks_dict[task_name]['dependencies']
        
        if not deps:
            # –ó–∞–¥–∞—á–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–∞—Ç—ã –∏–∑ CSV
            start_date = pd.to_datetime(df[df['Task'] == task_name]['Start'].iloc[0])
        else:
            # –ó–∞–¥–∞—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –í–°–ï–• –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            dep_finish_dates = []
            for dep in deps:
                if dep in tasks_dict:
                    _, dep_finish = calculate_early_times(dep)
                    dep_finish_dates.append(dep_finish)
            
            if dep_finish_dates:
                start_date = max(dep_finish_dates)
            else:
                start_date = pd.to_datetime(df[df['Task'] == task_name]['Start'].iloc[0])
        
        duration = tasks_dict[task_name]['duration']
        finish_date = start_date + pd.to_timedelta(duration, unit='d')
        
        tasks_dict[task_name]['early_start'] = start_date
        tasks_dict[task_name]['early_finish'] = finish_date
        
        return start_date, finish_date
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–Ω–Ω–∏–µ —Å—Ä–æ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    for task_name in tasks_dict.keys():
        calculate_early_times(task_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    for task_name, times in tasks_dict.items():
        df.loc[df['Task'] == task_name, 'Start'] = times['early_start']
        df.loc[df['Task'] == task_name, 'End'] = times['early_finish']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–¥–Ω–∏–µ —Å—Ä–æ–∫–∏ –∏ —Ä–µ–∑–µ—Ä–≤
    project_end = df['End'].max()
    
    for task_name in tasks_dict.keys():
        tasks_dict[task_name]['late_finish'] = project_end
        tasks_dict[task_name]['late_start'] = project_end - pd.to_timedelta(tasks_dict[task_name]['duration'], unit='d')
    
    # –û–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–¥–Ω–∏—Ö —Å—Ä–æ–∫–æ–≤
    for task_name in reversed(list(tasks_dict.keys())):
        successors = tasks_dict[task_name]['successors']
        if successors:
            min_late_start = min([tasks_dict[succ]['late_start'] for succ in successors])
            tasks_dict[task_name]['late_finish'] = min_late_start
            tasks_dict[task_name]['late_start'] = min_late_start - pd.to_timedelta(tasks_dict[task_name]['duration'], unit='d')
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤ –≤—Ä–µ–º–µ–Ω–∏
    for task_name in tasks_dict.keys():
        tasks_dict[task_name]['float'] = (tasks_dict[task_name]['late_start'] - tasks_dict[task_name]['early_start']).days
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å - –∑–∞–¥–∞—á–∏ —Å –Ω—É–ª–µ–≤—ã–º —Ä–µ–∑–µ—Ä–≤–æ–º
    critical_tasks = [task_name for task_name, task_data in tasks_dict.items() if task_data['float'] == 0]
    
    # –û—Ç–º–µ—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    if critical_tasks:
        df.loc[df['Task'].isin(critical_tasks), 'Is_Critical'] = True
        print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {len(critical_tasks)} –∑–∞–¥–∞—á")
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏
        start_critical = [task for task in critical_tasks if not tasks_dict[task]['dependencies']]
        if start_critical:
            chain = [start_critical[0]]
            current_task = start_critical[0]
            
            while tasks_dict[current_task]['successors']:
                next_critical = [succ for succ in tasks_dict[current_task]['successors'] if succ in critical_tasks]
                if next_critical:
                    chain.append(next_critical[0])
                    current_task = next_critical[0]
                else:
                    break
            
            print(f"üîó –¶–µ–ø–æ—á–∫–∞: {' ‚Üí '.join(chain)}")
    
    return df

def print_detailed_analysis(df):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    critical_tasks = df[df['Is_Critical']]
    total_duration = (df['End'].max() - df['Start'].min()).days
    
    print("\n" + "="*50)
    print("üìä –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê")
    print("="*50)
    
    print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(df)}")
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {len(critical_tasks)}")
    print(f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} –¥–Ω–µ–π")
    print(f"–ü–µ—Ä–∏–æ–¥: {df['Start'].min().strftime('%d.%m.%Y')} - {df['End'].max().strftime('%d.%m.%Y')}")
    
    print(f"\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò:")
    if len(critical_tasks) > 0:
        for task in critical_tasks.itertuples():
            deps_info = f" ‚Üê {task.Dependencies}" if hasattr(task, 'Dependencies') and pd.notna(task.Dependencies) else ""
            workers_info = f" [{task.Workers}—á]" if hasattr(task, 'Workers') else ""
            print(f"   ‚Ä¢ {task.Task} - {task.Duration} –¥–Ω–µ–π{workers_info}{deps_info}")

def create_gantt_chart(df, save_path=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞"""
    
    is_valid, errors, df_validated = validate_data(df)
    
    if not is_valid:
        return None
    
    print("üîÑ –†–ê–°–ß–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ì–û –ü–£–¢–ò –ò –î–ê–¢...")
    
    df_with_critical = calculate_critical_path_with_dependencies(df_validated)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    print("üé® –ü–û–°–¢–†–û–ï–ù–ò–ï –î–ò–ê–ì–†–ê–ú–ú–´...")
    fig, ax = plt.subplots(figsize=(16, 10))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
    df_sorted = df_with_critical.sort_values('Start')
    
    # –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
    for i, (_, task) in enumerate(df_sorted.iterrows()):
        if task['Is_Critical']:
            color = '#e74c3c'
            alpha = 0.9
        else:
            color = '#3498db'
            alpha = 0.7
        
        # –†–∏—Å—É–µ–º –ø–æ–ª–æ—Å—É –∑–∞–¥–∞—á–∏
        ax.barh(y=task['Task'],
               left=task['Start'],
               width=task['End'] - task['Start'],
               height=0.6,
               color=color,
               alpha=alpha,
               edgecolor='white',
               linewidth=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        center = task['Start'] + (task['End'] - task['Start']) / 2
        workers_info = f"({task.Workers}—á)" if hasattr(task, 'Workers') and task.Workers > 0 else ""
        ax.text(center, task['Task'], f'{int(task["Duration"])}–¥{workers_info}',
               ha='center', va='center',
               fontweight='bold', fontsize=8,
               color='white')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    ax.set_xlabel('–î–∞—Ç–∞')
    ax.set_ylabel('–ó–∞–¥–∞—á–∏')
    ax.set_title('–î–ò–ê–ì–†–ê–ú–ú–ê –ì–ê–ù–¢–ê –° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú –ü–£–¢–ï–ú', fontweight='bold')
    ax.grid(axis='x', alpha=0.3)
    plt.xticks(rotation=45)
    
    # –õ–µ–≥–µ–Ω–¥–∞
    legend_elements = [
        Patch(facecolor='#e74c3c', alpha=0.9, label='–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å'),
        Patch(facecolor='#3498db', alpha=0.7, label='–û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏')
    ]
    ax.legend(handles=legend_elements, loc='upper right')
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if save_path:
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"üíæ –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
    
    plt.show()
    
    # –ê–Ω–∞–ª–∏–∑
    print_detailed_analysis(df_with_critical)
    
    return df_with_critical
